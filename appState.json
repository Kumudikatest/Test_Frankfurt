{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "95a4ef8d-b730-4932-a6f0-6835fd096f95": {
        "id": "95a4ef8d-b730-4932-a6f0-6835fd096f95",
        "parent": null,
        "name": "Test_Frankfurt",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "8f17496a-7561-445f-89db-e785a9068fce"
        ],
        "isRemovable": false,
        "filePath": "Test_Frankfurt"
      },
      "8f17496a-7561-445f-89db-e785a9068fce": {
        "id": "8f17496a-7561-445f-89db-e785a9068fce",
        "parent": "95a4ef8d-b730-4932-a6f0-6835fd096f95",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "Test_Frankfurt/lambda.js",
        "code": "let AWS = require('aws-sdk');\nlet SL_AWS = require('slappforge-sdk-aws');\nconst sqs = new SL_AWS.SQS(AWS);\nconst sns = new AWS.SNS();\nconst s3 = new AWS.S3();\nconst kinesis = new AWS.Kinesis();\nconst cognito_idp = new AWS.CognitoIdentityServiceProvider();\n\nexports.handler = function (event, context, callback) {\n    cognito_idp.listUsers({\n        UserPoolId: process.env.UserPoolId_cognitoCognitoFrankfurt1,\n        Limit: \"10\"\n    }, function (error, data) {\n        if (error) {\n            // implement error handling logic here\n            throw error;\n        }\n        // your logic goes within this block\n        console.log(data);\n\n        kinesis.describeStream({\n            StreamName: 'Test_Frankfurt',\n            Limit: 10,\n            ExclusiveStartShardId: 'shardId-000000000000'\n        }).promise()\n            .then(data => {\n                // your logic goes here\n                console.log(data);\n            })\n            .catch(err => {\n                // error handling goes here\n                console.log(err);\n            });\n    });\n    s3.listObjects({\n        'Bucket': 'cf-templates-8j7s4hdepmkt-us-east-1',\n        'MaxKeys': 10,\n        'Prefix': ''\n    }).promise()\n        .then(data => {\n            console.log(data);           // successful response\n            /*\n            data = {\n             Contents: [\n                {\n                   ETag: \"\\\\\"70ee1738b6b21e2c8a43f3a5ab0eee71\\\\\"\",\n                   Key: \"example1.jpg\",\n                   LastModified: <Date Representation>,\n                   Owner: {\n                      DisplayName: \"myname\",\n                      ID: \"12345example25102679df27bb0ae12b3f85be6f290b936c4393484be31bebcc\"\n                   },\n                   Size: 11,\n                   StorageClass: \"STANDARD\"\n                },\n                {...}\n            */\n        })\n        .catch(err => {\n            console.log(err, err.stack); // an error occurred\n        });\n    sns.listSubscriptionsByTopic({\n        TopicArn: 'arn:aws:sns:eu-central-1:318300609668:Test_Frankfurt'\n    }).promise()\n        .then(data => {\n            // your code goes here\n            console.log(data);\n        })\n        .catch(err => {\n            // error handling goes here\n            console.log(err);\n        });\n    sqs.receiveMessage({\n        QueueUrl: 'https://sqs.eu-central-1.amazonaws.com/318300609668/Test_Frankfurt',\n        AttributeNames: ['All'],\n        MaxNumberOfMessages: '1',\n        VisibilityTimeout: '30',\n        WaitTimeSeconds: '0'\n    }).promise()\n        .then(receivedMsgData => {\n            if (!!(receivedMsgData) && !!(receivedMsgData.Messages)) {\n                let receivedMessages = receivedMsgData.Messages;\n                receivedMessages.forEach(message => {\n                    // your logic to access each message through out the loop. Each message is available under variable message \n                    // within this block\n                });\n            } else {\n                // No messages to process\n            }\n        })\n        .catch(err => {\n            // error handling goes here\n            console.log(err);\n        });\n\n    callback(null, { \"message\": \"Successfully executed\" });\n}",
        "triggers": [
          {
            "resourceName": "apigeuCentral1APIFrankfurt1testany",
            "config": {}
          }
        ],
        "config": {
          "runtime": "nodejs8.10",
          "timeout": 60,
          "memory": 128
        },
        "testCases": {
          "a1f5b000-0d72-4b75-9d7b-098fc7286cb6": {
            "id": "a1f5b000-0d72-4b75-9d7b-098fc7286cb6",
            "name": "Unnamed event",
            "functionId": "8f17496a-7561-445f-89db-e785a9068fce",
            "event": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"
          }
        }
      }
    },
    "deletedFiles": [],
    "rootNode": "95a4ef8d-b730-4932-a6f0-6835fd096f95",
    "openFiles": [
      "8f17496a-7561-445f-89db-e785a9068fce"
    ],
    "currentFileId": "8f17496a-7561-445f-89db-e785a9068fce",
    "resources": {
      "apigeuCentral1APIFrankfurt1test1any": {
        "name": "apigeuCentral1APIFrankfurt1test1any",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "eu-central-1",
          "apiMode": 0,
          "apiName": "APIFrankfurt1",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "test1",
          "resourcePath": "/test1",
          "restMethod": "ANY",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "test1"
        },
        "globallyEditable": false
      },
      "apigeuCentral1APIFrankfurt1testany": {
        "name": "apigeuCentral1APIFrankfurt1testany",
        "type": "API_GATEWAY",
        "config": {
          "selectedRegion": "eu-central-1",
          "apiMode": 0,
          "apiName": "APIFrankfurt1",
          "endpointType": "EDGE",
          "resourceMode": 0,
          "resourceName": "test",
          "resourcePath": "/test",
          "restMethod": "ANY",
          "proxyIntegration": false,
          "enableCORS": false,
          "stageMode": 0,
          "stageName": "test1"
        },
        "globallyEditable": false
      },
      "cognitoCognitoFrankfurt1": {
        "name": "cognitoCognitoFrankfurt1",
        "type": "CognitoIdentityServiceProvider",
        "config": {
          "mode": 0,
          "name": "CognitoFrankfurt1",
          "userPool": {
            "Name": "Cognito_Frankfurt1",
            "isNew": true,
            "AutoVerifiedAttributes": [],
            "AliasAttributes": [],
            "UsernameAttributes": [],
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireUppercase": true,
                "RequireLowercase": true,
                "RequireNumbers": true,
                "RequireSymbols": true
              }
            },
            "SchemaAttributes": [
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": false,
                "Name": "sub",
                "Required": true
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "address",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "birthdate",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "email",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "family_name",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "gender",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "given_name",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "locale",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "middle_name",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "name",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "nickname",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "phone_number",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "picture",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "preferred_username",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "profile",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "timezone",
                "Required": false
              },
              {
                "AttributeDataType": "Number",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "updated_at",
                "Required": false
              },
              {
                "AttributeDataType": "String",
                "DeveloperOnlyAttribute": false,
                "Mutable": true,
                "Name": "website",
                "Required": false
              }
            ],
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": false,
              "UnusedAccountValidityDays": 7,
              "InviteMessageTemplate": {}
            }
          }
        },
        "globallyEditable": true
      },
      "kinesisTestFrankfurt": {
        "name": "kinesisTestFrankfurt",
        "type": "Kinesis",
        "config": {
          "mode": 0,
          "StreamName": "Test_Frankfurt",
          "shards": 1,
          "region": "eu-central-1",
          "operation": "describe-stream"
        },
        "globallyEditable": true
      },
      "s3cfTemplates8j7s4hdepmktUsEast1": {
        "name": "s3cfTemplates8j7s4hdepmktUsEast1",
        "type": "S3",
        "config": {
          "mode": 1,
          "bucket": {
            "region": "eu-central-1",
            "name": "cf-templates-8j7s4hdepmkt-us-east-1"
          }
        },
        "globallyEditable": false
      },
      "snseuCentral1TestFrankfurt": {
        "name": "snseuCentral1TestFrankfurt",
        "type": "SNS",
        "config": {
          "topicMode": 0,
          "topicName": "Test_Frankfurt",
          "topicArn": "arn:aws:sns:eu-central-1:318300609668:Test_Frankfurt",
          "topicRegion": "eu-central-1",
          "snsType": 0,
          "topicDisplayName": "Test_Frank",
          "subscriptions": []
        },
        "globallyEditable": true
      },
      "sqseuCentral1TestFrankfurt": {
        "name": "sqseuCentral1TestFrankfurt",
        "type": "SQS",
        "config": {
          "mode": 0,
          "existing": false,
          "name": "Test_Frankfurt",
          "url": "https://sqs.eu-central-1.amazonaws.com/318300609668/Test_Frankfurt",
          "selectedRegion": "eu-central-1",
          "deliveryDelay": 0,
          "deliveryDelayUnit": "seconds",
          "useRedrivePolicy": false,
          "useSSE": false,
          "kmsCustomerMasterKey": "default",
          "accountId": "318300609668",
          "dataKeyReusePeriod": 5,
          "queueType": "standardQueue",
          "defaultVisibilityTimeout": 30,
          "defaultVisibilityTimeoutUnit": "seconds",
          "messageRetentionPeriod": 4,
          "messageRetentionPeriodUnit": "days",
          "maximumMessageSize": 256,
          "receiveMessageWaitTime": 0,
          "deadLetterQueueName": "",
          "contentBasedDeduplication": false,
          "operation": 0
        },
        "globallyEditable": true
      }
    },
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {
        "slappforge-sdk-aws": {
          "name": "slappforge-sdk-aws",
          "version": "0.0.5",
          "notRemovable": false
        }
      }
    },
    "lambdaId": "8f17496a-7561-445f-89db-e785a9068fce"
  },
  "PROJECT_META": {
    "projectName": "Test_Frankfurt",
    "projectDescription": "Region = Frankfurt",
    "projectVersion": "2.0.0",
    "projectRegion": "eu-central-1",
    "repoName": "test",
    "repoUrl": "",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1548325944102
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "Test_Frankfurt",
      "url": "https://github.com/Kumudikatest/Test_Frankfurt"
    }
  }
}